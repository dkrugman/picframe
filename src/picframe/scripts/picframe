#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Dynamic function call tracer for Picframe.

Logs all function calls and returns dynamically in execution order.
Replaces each call line with a call→return line in real time by moving
the cursor up, overwriting the original line, and returning the cursor
to continue logging. Blank lines may appear in live output, but not
in trace.log.

Usage:
    Set TRACING = True to enable tracing.
"""

import re, sys, os, time, asyncio
from picframe.start import main


TRACING = False  # Set to False to disable tracing
FUNC_COL_WIDTH = 32
LOC_COL_WIDTH  = 28
SUF_COL_WIDTH  = 42

FILTER_PATH = "/home/pi/src/picframe/src/picframe"
IGNORE_FUNCS = {
    'paused', 'is_video_playing', '__draw_overlay', 'clock_is_on',
    'slideshow_transition', '__update_pointer_position',
    '__pointer_moved', '__handle_touch_input',
    'menu_is_on', 'check_input', '<genexpr>', 'EXIF_TO_FIELD'
}

CALL_LINES = []
CALL_MAP = {}
CURSOR_LINE = 0
SOURCE = ""

class StdIOTracker:               # Accounts for any lines from other loggers/output to stdout/stderr 
    def __init__(self, real_stream):
        self.real_stream = real_stream
        self._buffer = ""

    def write(self, text):
        #time.sleep(.1)
        global SOURCE
        global CURSOR_LINE
        self._buffer += text
        while '\n' in self._buffer:
            line, self._buffer = self._buffer.split('\n', 1)
            if SOURCE != "TRACE":   # If not from trace, add CURSOR_LINE to the start 
                full_line = f"\033[33m{CURSOR_LINE:05d}: {line} \033[0m\n"  # 33m for yellow color 
            else:
                full_line = f"{line}\n"
            self.real_stream.write(full_line)
            SOURCE = ""  # Reset SOURCE after writing
            CURSOR_LINE += 1

    def flush(self):
        if self._buffer:
            self.write('\n')
        self.real_stream.flush()

# Replace sys.stdout and sys.stderr
sys.stdout = StdIOTracker(sys.stdout)
sys.stderr = StdIOTracker(sys.stderr)

def trace_calls(frame, event, arg):
    global SOURCE
    global CURSOR_LINE
    code = frame.f_code
    func_name = code.co_name

    if func_name in IGNORE_FUNCS:
        return None
    if not code.co_filename.startswith(FILTER_PATH):
        return None

    fn = f"{func_name}()".ljust(FUNC_COL_WIDTH)
    loc_str = f"{os.path.basename(code.co_filename)}:{frame.f_lineno}"
    loc = loc_str.ljust(LOC_COL_WIDTH)

    if event == 'call':
        SOURCE = "TRACE"
        caller = frame.f_back
        caller_loc = f"{os.path.basename(caller.f_code.co_filename)}:{caller.f_lineno}" if caller else ""
        suffix_text = f"(from {caller_loc})" if caller_loc != loc_str else ""
        suffix = (f" {suffix_text}" if suffix_text else "").ljust(SUF_COL_WIDTH)
        line = f"{CURSOR_LINE:05d}: CALL → {fn} @ {loc}{suffix}"
        CALL_LINES.append(line)
        print(line + '\n', end='')  # print but don't count it - stdout will count it
        CALL_MAP[frame] = (len(CALL_LINES) - 1, time.perf_counter(), CURSOR_LINE -1)
        return trace_calls

    elif event == 'return':
        SOURCE = "TRACE"
        if frame in CALL_MAP:
            index, start_time, call_line_num = CALL_MAP.pop(frame)
            elapsed = time.perf_counter() - start_time
            ret_loc = f"{os.path.basename(code.co_filename)}:{frame.f_lineno}"
            ret_info = f"← RET @ {ret_loc.ljust(LOC_COL_WIDTH)} ({elapsed*1000:6.2f}ms)"
            updated_line = CALL_LINES[index] + f"  {ret_info}"
            CALL_LINES[index] = updated_line
            lines_up = CURSOR_LINE - call_line_num
            lines_down = lines_up - 1
            print(f"\033[{lines_up}A", end='')           
            print('\r' + f"\033[36m{updated_line}\033[0m" + ' ' * 10)   # 36m for cyan color
            if lines_down:
                print(f"\033[{lines_down}B", end='') 
            CURSOR_LINE -= 1
    return trace_calls

if __name__ == '__main__':
    if TRACING:
        print("Starting picframe with tracing...")
        sys.settrace(trace_calls)
    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
    sys.exit(asyncio.run(main()))
